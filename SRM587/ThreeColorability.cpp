#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class ThreeColorability {
public:
	int root[256];
	int getRoot(int x)
	{
		if (root[x] == x) return x; else
		return root[x] = getRoot(root[x]);
	}
	void combine(int x, int y)
	{
		root[getRoot(x)] = getRoot(y);
	}
	bool check(int x,int y)
	{
		if (getRoot(x) == getRoot(y)) return true;
		return false;
	}
	bool valid(const vector<string> cells)
	{
		int n = cells.size();
		int m = cells[0].size();
		int l = n + m;
		for (int i = 0; i < 2*l ;++i)
			root[i] = i;

		for (int i = 0 ; i < n; ++i )
			for (int j = 0 ; j < m; ++j)
				if (cells[i][j] == 'N')
				{
					// 0
					if (check(2*i, 2*(n+j)+1)) return false;
					combine( 2*(i) ,    2*(n+j) );
					combine( 2*(i) + 1, 2*(n+j) +1); 
				} else
				if (cells[i][j] == 'Z')
				{
					// 1
					if (check(2*i,2*(n+j))) return false;
					combine( 2*(i) ,    2*(n+j) + 1 );
					combine( 2*(i) + 1, 2*(n+j) );
				}
		return true;
	}
	vector <string> lexSmallest(vector <string> cells) {
		vector<string> ans;
		if (valid(cells))
		{
			int n = cells.size();
			int m = cells[0].size();
			for (int i = 0 ; i < n; ++i)
				for (int j = 0; j < m;++j)
					if (cells[i][j] == '?')
					{
						cells[i][j] = 'N';
						if (!valid(cells))
							cells[i][j] = 'Z';
					}
			for (int i = 0; i< n ;++i)
			{
				string tmp = "";
				for (int j = 0 ; j < m;++j)
					tmp += cells[i][j];
				ans.push_back(tmp);
			}
		}
		return ans;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, vector <string> p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	ThreeColorability *obj;
	vector <string> answer;
	obj = new ThreeColorability();
	clock_t startTime = clock();
	answer = obj->lexSmallest(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "{";
		for (int i = 0; int(p1.size()) > i; ++i) {
			if (i > 0) {
				cout << ",";
			}
			cout << "\"" << p1[i] << "\"";
		}
		cout << "}" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "{";
	for (int i = 0; int(answer.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << answer[i] << "\"";
	}
	cout << "}" << endl;
	if (hasAnswer) {
		if (answer.size() != p1.size()) {
			res = false;
		} else {
			for (int i = 0; int(answer.size()) > i; ++i) {
				if (answer[i] != p1[i]) {
					res = false;
				}
			}
		}
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	vector <string> p1;
	
	{
	// ----- test 0 -----
	string t0[] = {"Z"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"Z"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"?" "?","?N"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"NN","NN"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"ZZZ","ZNZ"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1.clear() /*{}*/;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"N?N?" "?NN","?" "?ZN?" "?Z","NN?" "?" "?Z?","ZZZ?Z?" "?","Z?" "?" "?NN?","N?" "?" "?" "?" "?N","ZZ?N?NN"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1.clear() /*{}*/;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"ZZZZ","ZZZZ","ZZZZ"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"ZZZZ","ZZZZ","ZZZZ"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
