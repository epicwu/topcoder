#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
using namespace std;


class LISNumber {
public:
	long long f[64][1500];
	long long sum[64];
	long long C[2600][2600];
	
	void Initial(int mmm)
	{
		long long M = mmm;
		memset(C,0,sizeof(C));
		C[0][0] = 1;
		for (int i = 1;i<2600; ++i )
		for (int j = 0;j<=i; ++j)
		if (j == 0) C[i][j] =  1 ; else
		C[i][j] = ( C[i-1][j-1] + C[i-1][j] ) % M;
	}
	long long process(int m,int n)
	{
		if (n + m -1>=0 && m - 1 >=0)
		return C[n+m-1][m-1]; else return 0;
	}
	int count(vector <int> cardsnum, int K) {
		int MOD=1000000007;
		Initial(MOD);

		int n = cardsnum.size();
		memset(f,0,sizeof(f));
		memset(sum,0,sizeof(sum));
		sum[0] = cardsnum[0];
		for (int i= 1;i<n;++i) sum[i] = sum[i-1] + cardsnum[i];
		f[0][cardsnum[0]] = 1;
		for (int i = 1; i < n; ++i)
		for (int k = cardsnum[i]; k <=sum[i] ; ++k )
		for (int j = cardsnum[i-1]; j<=k; ++j)
		{
			int newSeq = k - j;
			int oldSeq = cardsnum[i] - newSeq;
			if (oldSeq >= 0)
			{
				long long tmp = (f[i-1][j]  * C[j][oldSeq]) % MOD;
				tmp = (tmp * process(sum[i-1]+oldSeq + 1 - j,newSeq)) % MOD;
				f[i][k] = (f[i][k] + tmp) % MOD;
			}
		}
		return f[n-1][K];
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, int p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << p1;
	cout << "]" << endl;
	LISNumber *obj;
	int answer;
	obj = new LISNumber();
	clock_t startTime = clock();
	answer = obj->count(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	int p1;
	int p2;
	
	{
	// ----- test 0 -----
	int t0[] = {1,1,1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	p2 = 4;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {2};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	p2 = 0;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {36,36,36,36,36};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 36;
	p2 = 1;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {3,2,11,5,7};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 20;
	p2 = 474640725;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	int t0[] = {31,4,15,9,26,5,35,8,9,7,9,32,3,8,4,6,26};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 58;
	p2 = 12133719;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	int t0[] = {27,18,28,18,28,4,5,9,4,5,23,5,36,28,7,4,7,13,5,26,6,24,9,7,7,5,7,24,7,9,36,9,9,9,5,9};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 116;
	p2 = 516440918;
	all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Let A be a sequence of integers.
// The LISNumber of A is the smallest positive integer L such that A can be obtained by concatenating L strictly increasing sequences.
// For example, the LISNumber of A = {1, 4, 4, 2, 6, 3} is 4, since we can obtain A as {1, 4} + {4} + {2, 6} + {3}, and there is no way to create A by concatenating 3 (or fewer) strictly increasing sequences.
// The LISNumber of a strictly increasing sequence is 1.
// 
// You have N types of cards.
// For each i, 0 <= i < N, you have cardsnum[i] cards of the i-th type.
// Each card of the i-th type contains the number i.
// 
// You are given the vector <int> cardsnum and an int K.
// You want to arrange all the cards you have into a row in such a way that the resulting sequence of integers has LISNumber K.
// Note that you must use all the cards you have, you can only choose their order.
// 
// Let X be the number of different valid sequences you can produce.
// Compute and return the number X, modulo 1,000,000,007.
// 
// DEFINITION
// Class:LISNumber
// Method:count
// Parameters:vector <int>, int
// Returns:int
// Method signature:int count(vector <int> cardsnum, int K)
// 
// 
// CONSTRAINTS
// -cardsnum will contain between 1 and 36 elements, inclusive.
// -Each element of cardsnum will be between 1 and 36, inclusive.
// -K will be between 1 and 1296, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// {1, 1, 1}
// 2
// 
// Returns: 4
// 
// In this case, there are 3 types of cards and you have one of each. Among the 6 sequences you can make, the following 4 have LISNumber 2:
// 
// {0, 2, 1}
// {1, 0, 2}
// {1, 2, 0}
// {2, 0, 1}
// 
// 
// 
// 1)
// {2}
// 1
// 
// Returns: 0
// 
// The only sequence you can make is {0, 0} and its LISNumber is 2.
// 
// 2)
// {36, 36, 36, 36, 36}
// 36
// 
// Returns: 1
// 
// Only the sequence {0, 1, 2, 3, 4, 0, 1, 2, 3, 4, ... (36 times) ... } has LISNumber 36.
// 
// 3)
// {3, 2, 11, 5, 7}
// 20
// 
// Returns: 474640725
// 
// 
// 
// 4)
// {31, 4, 15, 9, 26, 5, 35, 8, 9, 7, 9, 32, 3, 8, 4, 6, 26}
// 58
// 
// Returns: 12133719
// 
// 
// 
// 5)
// {27, 18, 28, 18, 28, 4, 5, 9, 4, 5, 23, 5,
//  36, 28, 7, 4, 7, 13, 5, 26, 6, 24, 9, 7,
//  7, 5, 7, 24, 7, 9, 36, 9, 9, 9, 5, 9}
// 116
// 
// Returns: 516440918
// 
// 
// 
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
