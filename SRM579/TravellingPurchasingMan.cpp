#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

int dis[64][64];
int f[65536][64];
int Open[64],Close[64],dur[64];

const int INF = 100000000;
class TravellingPurchasingMan {
public:
	vector<int> GetNum(string x)
	{
		vector<int> ans;
		x +=' ';
		int tmp = 0;
		for (int i=0;i<x.size();++i)
		 if (x[i]!=' ') tmp = tmp * 10 + x[i] -'0'; else
		 {
		 	ans.push_back(tmp);
		 	tmp = 0;
		 }
		return ans;
	}
	void Floyed(int N)
	{
		for (int k=0;k<N;++k)
		for (int i=0;i<N;++i)
		for (int j=0;j<N;++j)
		if (dis[i][k] + dis[k][j] < dis[i][j])
		dis[i][j] = dis[i][k] + dis[k][j];
	}
	int maxStores(int N, vector <string> interestingStores, vector <string> roads) {
		for (int i=0;i<interestingStores.size();++i)
		{
			vector<int> tmp = GetNum(interestingStores[i]);
			Open[i] =  tmp[0]; Close[i] = tmp[1]; dur[i] = tmp[2];
		}
		for (int i=0;i<N;++i)
		for (int j=0;j<N;++j)
		if (i==j) dis[i][j] = 0; else dis[i][j] = INF;

		for (int i=0;i<roads.size();++i)
		{
			vector<int> tmp = GetNum(roads[i]);
			dis[tmp[0]][tmp[1]] = min(dis[tmp[0]][tmp[1]], tmp[2]);
			dis[tmp[1]][tmp[0]] = dis[tmp[0]][tmp[1]];
		}
		Floyed(N);

		int M = interestingStores.size();
		for (int i=0;i<(1<<M);++i)
		for (int j=0;j<N;++j)
		f[i][j] = INF;
		f[0][N-1] = 0;

		int ans = 0;

		for (int i=0;i<(1<<M);++i)
		for (int j=0;j<N;++j)
		if ( f[i][j] < INF)
		{
			int cnt = 0 ;
			for (int k=0;k<M;++k)
			if ((i & (1<<k)) > 0) cnt ++;
			ans = max(ans,cnt);
			for (int k=0;k<M;++k)
			if( ((1<<k) & i) == 0 )
			if (dis[j][k] < INF)
			{
				int t = f[i][j] + dis[j][k];
				t = max(t,Open[k]);
				if (t<=Close[k])
				f[i + (1<<k)][k] = min(f[i + (1<<k)][k], t + dur[k]);
			}
		}
		return ans;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, vector <string> p1, vector <string> p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << p0 << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p1[i] << "\"";
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p2.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p2[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	TravellingPurchasingMan *obj;
	int answer;
	obj = new TravellingPurchasingMan();
	clock_t startTime = clock();
	answer = obj->maxStores(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	int p0;
	vector <string> p1;
	vector <string> p2;
	int p3;

	{
	// ----- test 0 -----
	p0 = 3;
	string t1[] = {"1 10 10","1 55 31","10 50 100"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	string t2[] = {"1 2 10"};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 1;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	p0 = 3;
	string t1[] = {"1 10 10","1 55 30","10 50 100"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	string t2[] = {"1 2 10"};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 2;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	p0 = 5;
	string t1[] = {"0 1000 17"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	string t2[] = {"2 3 400","4 1 500","4 3 300","1 0 700","0 2 400"};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 0;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
