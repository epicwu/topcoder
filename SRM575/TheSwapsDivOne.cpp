#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
using namespace std;


class TheSwapsDivOne {
public:
	double f[1000100],g[1000100];
	double E[4096];
	double find(vector <string> sequence, int k) {
		string data = "";
		for (unsigned int i = 0;  i < sequence.size();++i)
			data+=sequence[i];
		int n = data.size();
		double C = 2 / double(n)/double(n-1);
		double C2= (double(n-2)* double(n-1) - 2)/double(n)/double(n-1);
		f[0] = 0;g[0]=1;
		for (int i = 1;i<=k;++i)
		{
			f[i] = f[i-1] * C2 + C;
			g[i] = g[i-1] * C2 + C;
		}
		memset(E,0,sizeof(E));
		double ans = 0;
		for (int i = 0 ; i < n ;++i)
		for (int j = 0 ; j < n ;++j)
		if (j == i)
		E[i] += double(data[j] - '0') * g[k]; else
		E[i] += double(data[j] - '0') * f[k];
		for (int i = 0 ; i < n; ++i)
			cout<<E[i]<<" ";
		cout<<endl;
		for (int i = 0 ; i < n ;++i)
		{
			double tmp = 0;
			for (int j = i ; j < n ;++j)
			{
				tmp += E[j];
				ans += tmp;
			}
		}
		ans = ans * double(2)/double(1+n)/double(n);
		return ans;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, int p1, bool hasAnswer, double p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << p1;
	cout << "]" << endl;
	TheSwapsDivOne *obj;
	double answer;
	obj = new TheSwapsDivOne();
	clock_t startTime = clock();
	answer = obj->find(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == answer && fabs(p2 - answer) <= 1e-9 * max(1.0, fabs(p2));
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	int p1;
	double p2;
	
	{
	// ----- test 0 -----
	string t0[] = {"4","77"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	p2 = 10.0;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"4","77"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 47;
	p2 = 10.0;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"1","1","1","1","1","1","1"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1000000;
	p2 = 3.0;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"572685085149095989026478064633266980348504469","19720257361","9","69"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 7;
	p2 = 98.3238536775161;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// John has a sequence of digits.
// He and Brus will now play with the sequence.
// 
// 
// First, John will repeat the following operation k times:
// He will choose two different positions in the sequence, and swap the elements at those positions.
// (John makes each choice uniformly at random.
// That is, each time John chooses two positions, each pair of different positions has the same probability of being chosen.)
// 
// 
// Afterwards, Brus will randomly choose a non-empty contiguous subsequence of John's sequence.
// He will compute the sum of all elements in the chosen subsequence and he will write it down on a piece of paper.
// (Brus also makes his choice uniformly at random.
// That is, each possible contiguous subsequence has the same probability of being chosen.)
// 
// 
// You are given a vector <string> sequence.
// Concatenate all elements of sequence to get the string s.
// For each i, the i-th character of s is a digit ('0'-'9') representing the digit at index i in John's original sequence.
// 
// 
// Return the expected value of the sum Brus writes down.
// 
// DEFINITION
// Class:TheSwapsDivOne
// Method:find
// Parameters:vector <string>, int
// Returns:double
// Method signature:double find(vector <string> sequence, int k)
// 
// 
// NOTES
// -The returned value must be accurate to within a relative or absolute value of 1E-9.
// 
// 
// CONSTRAINTS
// -sequence will contain between 2 and 47 elements, inclusive.
// -Each element of sequence will contain between 1 and 47 characters, inclusive.
// -Each element of sequence will consist of only decimal digits ('0'-'9').
// -k will be between 1 and 1,000,000, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// {"4", "77"}
// 1
// 
// Returns: 10.0
// 
// There are three equally likely swaps John might make.
// If the first two elements are swapped, John will get the sequence {7,4,7}.
// Then Brus chooses one of the six possible subsequences.
// Their sums are 7, 4, 7, 11, 11 and 18.
// Thus the expected value is (7 + 4 + 7 + 11 + 11 + 18)/6 = 29/3.
// 
// If the first and the last elements are swapped, the sequence becomes {7,7,4}, and the subsequence sums are 7, 7, 4, 14, 11 and 18.
// The expected value in this case is (7 + 7 + 4 + 14 + 11 + 18)/6 = 61/6.
// 
// When the last two elements are swapped, the sequence doesn't change and the expected value is equal to 61/6 as well.
// Finally, the overall expected value is equal to (29/3 + 61/6 + 61/6)/3 = 10.
// 
// 
// 1)
// {"4", "77"}
// 47
// 
// Returns: 10.0
// 
// 
// 
// 2)
// {"1", "1", "1", "1", "1", "1", "1"}
// 1000000
// 
// Returns: 3.0
// 
// 
// 
// 3)
// {"572685085149095989026478064633266980348504469", "19720257361", "9", "69"}
// 7
// 
// Returns: 98.3238536775161
// 
// 
// 
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
