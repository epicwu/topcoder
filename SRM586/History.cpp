#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <sstream>
#include <cstring>
using namespace std;

const int INF = 1000000000;
class History {
public:
	int n ;
	int data[32][64];
	int MIN[32][32],MAX[32][32];
	void decode(string tmp)
	{
		int c1=tmp[0]-'A',c2=tmp[3]-'A',k1=tmp[1]-'0',k2=tmp[4]-'0';
		int s1 = data[c1][k1], e1 = data[c1][k1+1], s2 = data[c2][k2], e2 =data[c2][k2+1];
		MAX[c1][c2] = min(e2-s1-1,MAX[c1][c2]);
		MIN[c1][c2] = max(s2-e1+1,MIN[c1][c2]);
		MIN[c2][c1] = max(s1-e2 +1,MIN[c2][c1]);
		MAX[c2][c1] = min(e1-s2-1,MAX[c2][c1]);
	}
	void process(string tmp)
	{
		tmp += ' ';
		string now = "";
		for (int i = 0; i < int(tmp.size());++i)
			if (tmp[i] ==' ')
			{
				decode(now);
				now = "";
			} else
			now += tmp[i];
		for (int k = 0 ; k < n; ++k)
			for (int i = 0 ; i < n ;++i)
				for (int j = 0 ; j < n; ++j)
				{
					MIN[i][j] = max(MIN[i][j],MIN[i][k] + MIN[k][j]);
					MAX[i][j] = min(MAX[i][j],MAX[i][k] + MAX[k][j]);
				}
	}
	string verifyClaims(vector <string> dynasties, vector <string> battles, vector <string> queries) {
		n = dynasties.size();
		for (int i = 0; i < int(dynasties.size());++i)
		{
			int a,b;
			stringstream ss(dynasties[i]);
			ss>>a;
			data[i][0] = 0;
			//cout<<data[i][0]<<" ";
			int cnt = 1;
			while (ss>>b)
			{
				data[i][cnt] = b - a;
				//cout<<data[i][cnt]<<" ";
				cnt++;
			}
			//cout<<endl;
		}
		memset(MIN,0,sizeof(MIN));
		memset(MAX,0,sizeof(MAX));
		for (int i = 0;  i < n ; ++i)
			for (int j = 0 ; j < n ; ++j)
				if (i != j)
				{
				  MIN[i][j] = -INF;
				  MAX[i][j] = INF;
				}
		string tmp = "";
		for (int i = 0 ; i < int(battles.size()); ++i) tmp+=battles[i];
		process(tmp);
		string ans = "";
		for (int i = 0; i < int(queries.size());++i)
		{
			string tmp = queries[i];
			int c1=tmp[0]-'A',c2=tmp[3]-'A',k1=tmp[1]-'0',k2=tmp[4]-'0';
			int s1 = data[c1][k1], e1 = data[c1][k1+1], s2 = data[c2][k2], e2 =data[c2][k2+1];
			int MAX1 = min(e2-s1-1,MAX[c1][c2]);
			int MIN1 = max(s2-e1+1,MIN[c1][c2]);
			int MIN2 = max(s1-e2 +1,MIN[c2][c1]);
			int MAX2 = min(e1-s2-1,MAX[c2][c1]);
			if (MAX1 < MIN1 || MAX2<MIN2) ans += 'N'; else ans += 'Y';
		}
		return ans;

	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, vector <string> p1, vector <string> p2, bool hasAnswer, string p3) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p1[i] << "\"";
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p2.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p2[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	History *obj;
	string answer;
	obj = new History();
	clock_t startTime = clock();
	answer = obj->verifyClaims(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p3 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <string> p0;
	vector <string> p1;
	vector <string> p2;
	string p3;
	
	{
	// ----- test 0 -----
	string t0[] = {"1 2 4","1 2 3"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"A1-B0"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	string t2[] = {"A0-B0","A0-B1","A1-B0","A1-B1"};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = "NNYY";
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	string t0[] = {"1000 2000 3000 10000","600 650 2000","1 1001 20001"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"B1-C0 A0-B0 A2-C1 B1-C1"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	string t2[] = {"A0-B1","A1-B1","A2-B1","C0-A0","B0-A2","C1-B0"};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = "YYYYNN";
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"1 4 5","10 13 17"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"A0-B0 A0-B0 B0-A0"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	string t2[] = {"A1-B0","A0-B1","A1-B1"};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = "YYY";
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	string t0[] = {"1 5 6","1 2 5"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"A0","-B0 A","1-B1"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	string t2[] = {"A0-B0","A1-B0","A0-B1","A1-B1"};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = "YNYY";
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 4 -----
	string t0[] = {"2294 7344","366 384 449 965 1307 1415","307 473 648 688 1097","1145 1411 1569 2606","87 188 551 598 947 998 1917 1942"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"A0-B4 B4-E2 B3-E2 D2-E4 A0-E4 B1-C3 A0-E3 A0-E6 D0","-E2 B2-E1 B4-E3 B4-D0 D0-E3 A0-D1 B2-C3 B1-C3 B4-E","3 D0-E1 B3-D0 B3-E2"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	string t2[] = {"A0-C2","E6-C2","A0-E4","B3-C1","C0-D2","B0-C1","D1-C3","C3-D0","C1-E3","D1-A0"};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = "YNYNNYNNNY";
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
