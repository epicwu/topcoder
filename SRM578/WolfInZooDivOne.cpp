#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
using namespace std;
const int C = 1000000007;

int Left[512];

int f[512][512];
	
class WolfInZooDivOne {
public:
	vector<int> Decode(string x)
	{
		vector<int> ans;
 		x+=' ';
		int tmp = 0;
		int beginPos = 0;
		while (x[beginPos] ==' ') ++ beginPos;
		for (int i=beginPos;i<x.size();++i)
		if (x[i]==' ') 
		{
			if (i>=1 && x[i-1]==' ') continue;
			ans.push_back(tmp);
			tmp=0;
		} else tmp = tmp * 10 + x[i]-'0';
		return ans;
	}
	int find(int a,int b)
	{
		if (f[a][b] < 0)
		{
			int k=min(Left[b]-1,a-1);
			int tt = 1;
				for (int i=0;i<=k;++i) tt = (tt + find(i,a)) % C;
				f[a][b] = tt;
				return f[a][b];
		} else return f[a][b];
	}
	int count(int N, vector <string> L, vector <string> R) {
		for (int i = 0 ; i < N;++i) Left[i]=i;
		string long1="",long2="";
		for (int i = 0 ; i < L.size();++i)
		{
			long1 = long1  + L[i];
		}
		cout<<long1<<endl;
		for (int i = 0 ; i < R.size();++i)
		{
			long2 = long2  + R[i];
		}
		cout<<long2<<endl;
		vector<int> tL = Decode(long1);
		vector<int> tR = Decode(long2);
		cout<<tL.size()<<endl;
		cout<<tR.size()<<endl;
		for (int j=0;j<tL.size();++j)
		for (int k=tL[j];k<=tR[j];++k)
		Left[k]=min(Left[k],tL[j]);
		
		memset(f,-1,sizeof(f));
		int sum = (1 + N) % C;
		for (int i=0;i<N;++i)
		for (int j=i+1;j<N;++j)
		{ 
			int tt= find(i,j);
			sum = (sum + tt) % C;
			 
		}
		return sum;	
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, vector <string> p1, vector <string> p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << p0 << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p1[i] << "\"";
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p2.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p2[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	WolfInZooDivOne *obj;
	int answer;
	obj = new WolfInZooDivOne();
	clock_t startTime = clock();
	answer = obj->count(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	vector <string> p1;
	vector <string> p2;
	int p3;
	
	{
	// ----- test 0 -----
	p0 = 5;
	string t1[] = {"0"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	string t2[] = {"4"};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 16;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 5;
	string t1[] = {"0 1"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	string t2[] = {"2 4"};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 21;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 10;
	string t1[] = {"0 4 2 7"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	string t2[] = {"3 9 5 9"};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 225;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 100;
	string t1[] = {"0 2 2 7 10 1","3 16 22 30 33 38"," 42 44 49 51 57 60 62"," 65 69 72 74 77 7","8 81 84 88 91 93 96"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	string t2[] = {"41 5 13 22 12 13 ","33 41 80 47 40 ","4","8 96 57 66 ","80 60 71 79"," 70 77 ","99"," 83 85 93 88 89 97 97 98"};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 6419882;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
