#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
using namespace std;


class SurveillanceSystem {
public:
	string data;
	int N,M,LL;
	int f[64][64],g[64][64];
	int cnt[64];
	int check(int pos)
	{
		int sum = 0;
		for (int i = 0; i <LL; ++i)
			if (data[pos + i] == 'X') sum = sum + 1;
		return sum;
	}
	string getContainerInfo(string containers, vector <int> reports, int L) {
		data  =containers;
		LL = L;
		N = containers.size();
		M = reports.size();
		memset(cnt,0,sizeof(cnt));
		for (int i = 0;i<M;++i)
			cnt[reports[i]]++;
		memset(f,0,sizeof(f));
		for (int i = L-1 ;i < N ;++i)
		{
			if (i-1>=0)
				for (int j = 0;j<64;++j)
				f[i][j] = f[i-1][j];
			f[i][check(i-L+1)] ++;
		}
		memset(g,0,sizeof(g));
		for (int i = N - L; i >=0 ; --i)
		{
			for (int j = 0;j<64;++j)
				g[i][j] = g[i+1][j];
			g[i][check(i)] ++;	
		}
		/*
		for (int i = 0; i < N ;++i)
		{
			cout<< "i = "<<i <<endl;
			for (int j = 0 ; j <= 3;++j)
				cout<<f[i][j]<<" ";
			cout<<endl;
			for (int j = 0 ; j <= 3;++j)
				cout<<g[i][j]<<" ";
			cout<<endl;
			
		}*/
		string ans="";
		for (int i = 0 ; i < N;++i)
		{
			bool flag = true;
			for (int j = 0 ;  j <=N ;++j)
			{
				int tmp = 0;
				if (i>0) tmp = f[i-1][j];
				if (tmp + g[i+1][j] < cnt[j])
				{
					flag = false;
					break;
				} 
			}
			if (!flag)
			{
				ans +='+'; 
			} else
			{
				bool possible = false;
				for (int j = max(i , L-1);j<=min(i+L-1,N-1);++j)
				if (cnt[check(j-L+1)] > 0)
				{
					bool flag = true;
					for (int k = 0; k <=N;++k)
					{
						int tmp = 0 ;
						if (j > 0) tmp = f[j-1][k];
						if ( tmp + g[j-L+2][k] < cnt[k] - int(check(j-L+1) == k)) flag = false;
					}
					if (flag)
					{
						possible = true;
						//cout << "for pos = " << i << " j = "<< j <<endl;
						break;
					}
				}
				if (possible) ans += '?'; else ans += '-';
			}
		}
		return ans;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, string p0, vector <int> p1, int p2, bool hasAnswer, string p3) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}" << "," << p2;
	cout << "]" << endl;
	SurveillanceSystem *obj;
	string answer;
	obj = new SurveillanceSystem();
	clock_t startTime = clock();
	answer = obj->getContainerInfo(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p3 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	vector <int> p1;
	int p2;
	string p3;
	
	{
	// ----- test 0 -----
	p0 = "-X--XX";
	int t1[] = {1,2};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 3;
	p3 = "?" "?++++";
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "-XXXXX-";
	int t1[] = {2};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 3;
	p3 = "?" "?" "?-?" "?" "?";
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "------X-XX-";
	int t1[] = {3,0,2,0};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 5;
	p3 = "++++++++++?";
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "-XXXXX---X--";
	int t1[] = {2,1,0,1};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 3;
	p3 = "?" "?" "?-?" "?++++?" "?";
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = "-XX--X-XX-X-X--X---XX-X---XXXX-----X";
	int t1[] = {3,3,3,3,3,3,3,3,3,3,3,3,3};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 7;
	p3 = "?" "?" "?++++?++++++++++++++++++++?" "?" "?" "?" "?" "?--";
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
