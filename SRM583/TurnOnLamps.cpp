#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
using namespace std;


class TurnOnLamps {
public:
	int N,root;
	vector<int> child[64]; 
	bool must[64][64],mustnot[64][64];
	int queue[64],ptr,qn;
	bool visit[64];
	void BFS()
	{
		memset(visit,false,sizeof(visit));
		qn = 1;
		ptr = 0;
		queue[ptr] = root;
		visit[root] = true;
		while (ptr<qn)
		{
			int now = queue[ptr];
			for (int i=0;i<int(child[now].size());++i)
			{
				int next = child[now][i];
				if (!visit[next])
				{
					queue[qn++] = next;
					visit[next] = true;
				}
			}
			ptr++;
		}
	}
	int g[64][2],f[64][2];
	void DP()
	{

		for (int z = qn - 1; z >= 0; --z)
		{
			int now = queue[z];
			memset(f,30,sizeof(f));
			//cout<<f[0][0]<<endl;
			f[0][0] = 0;
			int n = child[now].size();
			for (int i = 1 ; i <=n; ++i )
			{
				int currChild = child[now][i-1];
				if (!mustnot[now][currChild])
				{
					f[i][0] = min(f[i][0] , f[i-1][1] + g[currChild][0]);
					f[i][0] = min(f[i][0] , f[i-1][1] + g[currChild][1] - 1);
					f[i][1] = min(f[i][1] , f[i-1][0] + g[currChild][0] + 1);
					f[i][1] = min(f[i][1] , f[i-1][0] + g[currChild][1]);
				}
				if (!must[now][currChild])
				{
					f[i][0] = min(f[i][0] , f[i-1][0] + g[currChild][0]);
					f[i][0] = min(f[i][0] , f[i-1][0] + g[currChild][1]);
					f[i][1] = min(f[i][1] , f[i-1][1] + g[currChild][0]);
					f[i][1] = min(f[i][1] , f[i-1][1] + g[currChild][1]);
				}

			}
			g[now][0] = f[n][0];
			g[now][1] = f[n][1];
		}
	}
	int minimize(vector <int> roads, string initState, string isImportant) {
		root = 0;
		N = roads.size();
		memset(must,false,sizeof(must));
		memset(mustnot,false,sizeof(mustnot));
		
		for (int i=0; i<roads.size();++i)
		{
			child[roads[i]].push_back(i+1);
			if (initState[i] == '0' && isImportant[i] == '1') must[roads[i]][i+1] = true;
			if (initState[i] == '1' && isImportant[i] == '1') mustnot[roads[i]][i+1] = true;
 		}
 		BFS();
 		DP();
 		return min(g[0][1] , g[0][0]);
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <int> p0, string p1, string p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "\"" << p1 << "\"" << "," << "\"" << p2 << "\"";
	cout << "]" << endl;
	TurnOnLamps *obj;
	int answer;
	obj = new TurnOnLamps();
	clock_t startTime = clock();
	answer = obj->minimize(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	string p1;
	string p2;
	int p3;
	
	{
	// ----- test 0 -----
	int t0[] = {0,0,1,1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "0001";
	p2 = "0111";
	p3 = 1;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {0,0,1,1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "0000";
	p2 = "0111";
	p3 = 2;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {0,0,1,1,4,4};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "000100";
	p2 = "111111";
	p3 = 2;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {0,0,1,1,4,4};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "100100";
	p2 = "011101";
	p3 = 2;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	int t0[] = {0,0,2,2,3,1,6,3,1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "010001110";
	p2 = "000110100";
	p3 = 1;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	int t0[] = {0,0,1,2,4,4,6,1,2,5,2,8,8,3,6,4,14,7,18,14,11,7,1,12,7,5,18,23,0,14,11,10,2,2,6,1,30,11,9,12,5,35,25,11,23,17,14,45,15};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "0000000000010000000000000010000010100000000000000";
	p2 = "1010111111111011011111000110111111111111111110111";
	p3 = 14;
	all_right = KawigiEdit_RunTest(5, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
